.header balloon.nes 0 16 
.tiles balloon.nes 16400 8192


.define ppu.control     0x2000
.define ppu.mask        0x2001
.define ppu.status      0x2002
.define oam.address     0x2003
.define oam.data        0x2004
.define ppu.scroll      0x2005
.define ppu.address     0x2006
.define ppu.data        0x2007
.define oam.dma         0x4014
.define pad.1           0x4016


    ; 这是 fc asm 定义变量的方式
    ; 我们用 0-ff 存储了 256 字节的 oam 数据
    ; 100 - 1ff 是系统保留栈
    ; 所以我们的变量是 200 开始
    ; 这是标准汇编定义变量的套路
    ; 用心去感受
    ; .rsset 标明了变量在内存中的地址
    ;.rsset 0x0200
    ; 变量名  .rs  变量长度
.vars 0x200
    paddleX 1
    buttonStatus 1
.vars_end


.offset 0x8000 


@__main:
        ; setup stack
        ; ---------------
        ; LDX #$FF
        ; TXS
    setup_stack                               ; 154
        ; setup PPU
    set a 0b1001.0000                   ; 169, 0, 144
    save a ppu.control                  ; 141, 0, 0, 32
    set a 0b0001.1010                   ; 169, 0, 26,
    save a ppu.mask                     ; 141, 0, 1, 32,

        ; setup paddle
    call @setupPaddle                   ; 32, 56, 128
        ; 这个函数设置了调色板
    call @setupPalette                  ; 32, 85, 128

@mainLoop:                              ; 32789
    jump @mainLoop                      ; 76, 21, 128,


    ; 我们之前的作业给出了调色板下标表示的颜色值
    ; 下面的链接中有颜色图，可以有直观的感受（不过本作业不看也一样）
    ; https://wiki.nesdev.com/w/index.php/PPU_palettes
@_data_palette:
        ; 背景和 sprite 各有 4 个调色板
        ; 所以上面说的 4-7 说的是【调色板一共有 8 个，背景用前四个（0-3），oam 用后四个（4-7）】
        ; 一共 16 * 2 = 32 字节数据
        ; nt palette
    .data 0x0 0x1 0x2 0x3 0x0 0x4 0x5 0x6 0x0 0x7 0x8 0x9 0x0 0xa 0xb 0xc
        ; oam palette
    .data 0x0 0x11 0x12 0x13 0x0 0x14 0x15 0x16 0x0 0x17 0x18 0x19 0x0 0x1a 0x1b 0x1c



    ; 这个函数复制粘贴的 4 个相似代码看起来很蠢
    ; 为什么不用循环来设置 4 个 sprite?
@setupPaddle:
        ; 设置 sprite0 的 4 个属性
    set a 10                                ; 169, 0, 10, 
    save a 0                                ; 141, 0, 0, 0,
    set a 0                                 ; 169, 0, 0,
    save a 1                                ; 141, 0, 1, 0,
    set a 0b0000.0000     ; attribute       ; 169, 0, 0,
    save a 2                                ; 141, 0, 2, 0
    set a 10                                ; 169, 0, 10,
    save a 3                                ; 141, 0, 3, 0,

        ; RTS   
    return_from_call                        ; 96


@setupPalette:
        ; read 2002 to reset 2006 high/low 
    load ppu.status a                       ; 173, 2, 32, 0
        ; set ppu.addr
    set a 0x3F                              ; 169, 0, 63
    save a ppu.address                      ; 141, 0, 6, 32,
    set a 0x00                              ; 169, 0, 0, 
    save a ppu.address                      ; 141, 0, 6, 32,
        ; 循环写入 32 字节的调色板  
    set x 0                                  
    @setupPaletteLoop:
        load_with_offset_x @_data_palette a   ; 189, 48, 128,
        save a ppu.data    
        increase_x
        compare x 0x20
        jump_if_not_equal @setupPaletteLoop
        ; RTS
    return_from_call 


@__nmi:                                 ; 32890                   
        ; 在 udpateInput 中根据按键计算出 paddle.x 并存入变量 0x200 中
    call @updateInput                   ; 32, 183, 128,     32890
        ; 在 update 中根据变量 0x200 去设置 4 个 sprite 的 x 坐标 
    call @update                        ; 32, 132, 128,     32893
        ; 调用 oam dma 画图
    call @draw                          ; 32, 145, 128,     32896
        ; RTI
    return_from_interrupt               ; 64                32899


@update:
    call @updatePaddle                  ; 32, 136, 128
    return_from_call                    ; 96


@updatePaddle:
    load paddleX y                      ; 173, 0, 2, 24,
    save y 3                            ; 141, 24, 3, 0,
    return_from_call                    ; 96


@draw:
        ;  写入 2003 来设置 OAM DMA 的 lb(low byte)
    set a 0
    save a oam.address
        ; 写入 4014 设置 hb(high byte)
        ; 然后系统会自动从 hb << 8 + lb 的地址开始读取 256 字节并写入 OAM
    set a 0
    save a oam.dma
        ; RTS
    return_from_call




@moveLeft:
    load paddleX a              ; 173, 0, 2, 0,
        ; SEC
    set_carry                   ; 56
    sub_a 1                     ; 233, 1,
    save a paddleX              ; 141, 0, 0, 2
        ;
    return_from_call            ; 96

@moveRight:
    load paddleX a
    clear_carry
    add_a 1 
    save a paddleX 
        ;
    return_from_call            ; 96



@updateInput:
        ; 设置读取模式
    set a 1             ;169, 1
    save a pad.1        ;141, 0, 22, 64,
    set a 0             ;169, 0
    save a pad.1        ;141, 0, 22, 64

    set x 8                             ; 169, 23, 8
    @updateInputReadLoop:
            ; 循环 8 次依次读取 A B Select Start Up Down Left Right 信息
        load pad.1 a                    ; 173, 22, 64, 0
            ; LSR
        logical_shift_right a           ; 74, 0
            ; ROL
        rotate_left buttonStatus        ; 46, 1, 2
            ; DEX
        decrease_x                      ; 202, 23
        ; compare x 0x0000                ;  224, 23, 0
        jump_if_not_equal @updateInputReadLoop  ; 208, 239, -1
        ; --------
        ; loop end
        ; --------

        ; 循环结束后 buttonStatus 中的 8 个 bit 就会存储 A B Select Start Up Down Left Right 的按键信息
        ; 
        ; bit0 就是按键 ->
    load buttonStatus a                 ; 173, 1, 2, 0
    and_a 0b00000001                   ;  41, 128,
        ; 没按, 就跳过按键逻辑）
    jump_if_equal @actionEnd1           ; 240, 3, 0   
       ; 按了
    call @moveRight                     ; 32, 173, 128,

    @actionEnd1:
            ; 
            ; bit1 就是按键 <-
        load buttonStatus a             ; 173, 1, 2, 0
        and_a 0b00000010                ; 41, 64,
        jump_if_equal @actionEnd2       ; 240, 3, 0,
        call @moveLeft                  ; 32, 161, 128, 
    @actionEnd2:


    return_from_call                    ; 96,



