// fc0.gua 能把 app0.fc0 编译为 app0.nes
con pureAsm = function(asm: string) {
    // 根据换行符把字符串切成数组
    asm = asm.split('\n')
    var _asm = []
    for (i, a in asm) {
        a = a.strip()
        // 去掉空格，注释
        if (a != "" and a.startswith(';') == false) {
            // 过滤 同行注释
            a = a.split(';')[0]
            _asm.add(a)
        }
    }
    return _asm
}

con regByName = function(name) {
    var reg = {
        'pa': 0,
        'a1': 1,
        'a2': 2,
        'a3': 3,
        'c1': 4,
        'f1': 5,
    }
    return reg[name]
}

con isNumStr = function(v) {
    // '12'
    return v == '{}'.format(int(v))
}

con memoAddress = function(addressLabel, type = '') {
    var res = ''
    var m = addressLabel.sub(1)
    if (m == '{}'.format(int(m))) {
        if (type == 'x16') {
            res = loEndOfInt(m)
        } else {
            res = [int(m)]
        }
    } else {
        res = [addressLabel]
    }
    return res
}

con labelAddress = function() {
    var memo = str.split('@')[1]
    return int(memo)
}

// 小端
con loEndOfInt = function(num) {
    num = int(num)
    var hi = num >> 8
    var lo = num & 255
    var v = [lo, hi]
    return v
}

con replaceLabel = function(program, labelAddress) {
    var b = []
    for (i, e in program) {
        var key = e + ':'
        if (labelAddress.has(key)) {
            // 现在的 label 地址是 16 位了
            var address = loEndOfInt(labelAddress[key])
            b.extend(address)
        } else {
            b.add(e)
        }
    }
    return b
}


con machineCode = function(asm: string) {
    var this.ppu = {
        'ppu.mask': 0,
        'oam.address': 0,
        'oam.data': 0,
    }

    // 提前把无效的 ‘’，\n , 注释 等字符处理掉
    asm = pureAsm(asm)

    // bytes 长度应该是 16 + 16K + 8K (24592字节)
    var bytes = [] 
    var header = []
    var program = []
    var tile = []
    //
    var labelAddress = {}
    var offset = 0
    var entrance = 0

    for(i, e in asm) {
        var line = e.split()
        var op = line[0]
        if (op.has('@')) {
            // 记录标志点位
            labelAddress[op] = offset
        } 
        else if (op == 'jump') {
            // jump @mainLoop
            op = 76
            offset += 3
            var memo = memoAddress(line[1], 'x16')
            program.add(op)
            program.extend(memo)
            
        }
        else if (op == 'set') {
             // set a 0b0001.0000 
             op = 169
             offset += 2
             var val = int(line[2])
             var memo = memoAddress(line[1], 'x16')
             program.extend([op, val])
        }
        else if (op == 'save') {
            // save a ppu.mask
            op = 141
            offset += 2
            var reg = line[2]
            var val = loEndOfInt(this.ppu[reg])
            program.add(op)
            program.extend(val)
       }

        // 虚拟指令
        else if (op == '.header') {
            // .header balloon.nes 0 16 
            var path = line[1]
            var start = int(line[2])
            var len = int(line[3])
            var nes = dataFromFile(path).sub(start, start + len)
            header.extend(nes)
        }
        else if (op == '.tiles') {
            // .tiles balloon.nes 16400 8192
            var path = line[1]
            var start = int(line[2])
            var len = int(line[3])
            var nes = dataFromFile(path).sub(start, start + len)
            tile.extend(nes)
        }
        else if (op == '.offset') {
            // .offset 0x8000 
            offset = int(line[1])
            entrance = int(line[1])
        }
        else if (op == '.define') {
            var reg = line[1]
            var addr = int(line[2])
            this.ppu[reg] = addr
        }
    }

    // 替换 @label
    program = replaceLabel(program, labelAddress)
    log('labelAddress: ', labelAddress)
    // 程序部分长度为 16k， 未使用的部分用 255 填充
    var __program = []
    for (var i = 0; i < 16 * 1024; i+=1) {
        if (i > program.length() - 1) {
            __program.add(255)
        } else {
            __program.add(program[i])
        }
    }
    // 倒数 3 4 位是程序入口
    var loEndOfInt = loEndOfInt(entrance)
    __program[-4] = loEndOfInt[0]
    __program[-3] = loEndOfInt[1]
    program = __program

    
    // 拼接机器码: bytes = header + program + tile 
    bytes.extend(header)
    bytes.extend(program)
    bytes.extend(tile)

    return bytes
}

con compile = function(path) {
    // 解析文件 path
    var asm = stringFromFile(path)

    // 解析为机器码
    var codes = machineCode(asm)
    
    // 写入文件
    var writePath = 'app0.nes'
    codes.writeToFile(writePath)

    return codes
}
