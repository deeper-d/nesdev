    ; 参考 app1.asm 来理解本程序
    ; 然后写一个 fc1.gua 编译我们这个 fc1 汇编程序
    ; 这个汇编程序就是 app1.asm 的一比一翻译
    ; 只是用了我们自定义的语法

    ; 这个程序中我们增加了下面 4 个新要素
    ;     .define 用于数字替换
    ;     set 指令
    ;     save 指令
    ;     寄存器 a

.header balloon.nes 0 16 
.tiles balloon.nes 16400 8192



    ; .define 的名字会被替换为后面的东西
    ; 所以 define 都放到最前面
    ; ppu.mask 是名字的全称
.define ppu.mask        0x2001   ; 1, 32
.define oam.address     0x2003   ; 3, 32
.define oam.data        0x2004   ; 4, 32



.offset 0x8000 


@__main:
        ; 我们把 A 寄存器用小写 a 表示,  0b0001.0000 = 16
        ; ------------------------------
        ; 把 16 写入到 内存 @0x2001 的位置
        ; -------------------------------
    set a 0b0001.0000 
    save a ppu.mask

        ; 写入 OAM 地址 0 
        ; ------------------------------
        ; 把 0 写入到 内存 @0x2003 的位置
        ; -------------------------------
    set a 0
    save a oam.address

        ; 接下来写入 y  index  attribute  x
        ; y = 16
        ; ------------------------------
        ; 把 16 写入到 内存 @0x2004 的位置
        ; 并且 把 16 写进 memo[memo[@2003]], 0x2003的地址会加+1， 此时是 [@2003]: 1，
        ; -------------------------------
    set a 16
    save a oam.data

        ; tile index = 0
        ; ------------------------------
        ; 把 0 写入内存@0x2004
        ; 并且 把 16 写进 memo[memo[@2003]], 0x2003的地址会加+1， 此时是 [@2003]: 2
        ; -------------------------------
    set a 0
    save a oam.data

        ; attribute = 0
        ; -------------------------------
        ; 把 0 写入内存@0x2004
        ; 并且 把 16 写进 memo[memo[@2003]], 0x2003的地址会加+1， 此时是 [@2003]: 3，
        ; -------------------------------
    set a 0
    save a oam.data

        ; x = 16
        ;;;----------- 
        ;;; ----------@0x2003的地址会加+1， 此时是 [@2003]: 4
        ; -------------------------------
        ; 把 16 写入内存@0x2004
        ; 并且 把 16 写进 memo[memo[@2003]], 0x2003的地址会加+1， 此时是 [@2003]: 4，
        ; -------------------------------
    set a 16
    save a oam.data

@mainLoop:
    jump @mainLoop

